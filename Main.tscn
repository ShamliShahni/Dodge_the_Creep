[gd_scene load_steps=7 format=2]

[ext_resource path="res://mob.tscn" type="PackedScene" id=1]
[ext_resource path="res://Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://hud.tscn" type="PackedScene" id=3]
[ext_resource path="res://PlayerHealthBar.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
export (PackedScene) var Mob
var score
var game_time = 0.4
var player = preload(\"res://Player.gd\")
var walk_speed = 200
var velocity = Vector2()
var mob
var moveing_Vector = Vector2()


func _ready():
	#moveing_Vector = Vector2(rand_range(mob.min_speed, mob.max_speed), 0)
	randomize()
	

func game_over():
	 $ScoreTimer.stop()
	 $MobTimer.stop()
	 $hud.show_game_over()

func new_game():
	 score = 0
	 $Player.start($StartPostion.position)
	 $Player.visible = true
	 $StartTimer.start()
	 $hud.update_score(score)
	 $hud.show_message(\"Get Ready\")
	
func _on_StartTimer_timeout():
	$MobTimer.start()
	$ScoreTimer.start()

func _on_ScoreTimer_timeout():
	score += 1
	$hud.update_score(score)
	
func _on_MobTimer_timeout():
	
	# Choose a random location on Path2D.
	$MobPath/MobSpawnLocation.offset = randi()
	# Create a Mob instance and add it to the scene.
	mob = Mob.instance()
	add_child(mob)
	# Set the mob's direction perpendicular to the path direction.
	var direction = $MobPath/MobSpawnLocation.rotation + PI / 2
	# Set the mob's position to a random location.
	mob.position = $MobPath/MobSpawnLocation.position
	# Add some randomness to the direction.
	direction += rand_range(-PI / 4, PI / 4)
	mob.rotation = direction
	# Set the velocity (speed & direction).
	velocity.x += walk_speed
	velocity.y += walk_speed
	#mob.move_and_slide(velocity,Vector2(0,-1))
	if mob.enemy_alive:
		moveing_Vector = Vector2(rand_range(mob.min_speed, mob.max_speed), 0)
		#mob.move_and_collide(moveing_Vector)
		mob.linear_velocity = moveing_Vector #Vector2(rand_range(mob.min_speed, mob.max_speed), 0)
		mob.linear_velocity = mob.linear_velocity.rotated(direction)
	#else:
	#	mob.linear_velocity = Vector2(0,0)
	#	mob.CollisionShape2D.disable = true
	#	mob.position = mob.pos
	#	mob.mode = 2
	
#func _process(delta):
#	var player_alive = player
#	if player_alive:
#		_on_GameTIme_timeout()
#
#
#func _on_GameTIme_timeout():
#	game_over()
"

[sub_resource type="Curve2D" id=2]
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, 2.90845, 1.25266, 0, 0, 0, 0, 475.442, 1.25266, 0, 0, 0, 0, 480.781, 716.727, 0, 0, 0, 0, 2.90845, 708.718, 0, 0, 0, 0, 2.90845, 1.25266, 0, 0, 0, 0, 473.854, 1.83041, 0, 0, 0, 0, 322.748, 52.4037, 0, 0, 0, 0, 470.109, 1.83041, 0, 0, 0, 0, 482.844, -2.66451 )
}

[node name="Main" type="Node"]
script = SubResource( 1 )
Mob = ExtResource( 1 )

[node name="Player" parent="." instance=ExtResource( 2 )]

[node name="ScoreTimer" type="Timer" parent="."]

[node name="StartTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="StartPostion" type="Position2D" parent="."]
position = Vector2( 240, 250 )

[node name="MobPath" type="Path2D" parent="."]
position = Vector2( 0.0408597, 0 )
scale = Vector2( 0.985951, 1 )
curve = SubResource( 2 )

[node name="MobSpawnLocation" type="PathFollow2D" parent="MobPath"]
position = Vector2( 2.90845, 1.25266 )
rotation = 3.03855e-08

[node name="MobTimer" type="Timer" parent="."]
wait_time = 2.0

[node name="hud" parent="." instance=ExtResource( 3 )]

[node name="Camera2D" type="Camera2D" parent="."]
offset = Vector2( 240, 360 )
current = true

[node name="GameTIme" type="Timer" parent="."]
wait_time = 0.4

[node name="PlayerHealthBar" parent="." instance=ExtResource( 4 )]
position = Vector2( 138.823, 60.0678 )

[connection signal="hit" from="Player" to="." method="game_over"]
[connection signal="hit" from="Player" to="." method="new_game"]
[connection signal="timeout" from="ScoreTimer" to="." method="_on_ScoreTimer_timeout"]
[connection signal="timeout" from="StartTimer" to="." method="_on_StartTimer_timeout"]
[connection signal="timeout" from="MobTimer" to="." method="_on_MobTimer_timeout"]
[connection signal="start_game" from="hud" to="." method="new_game"]
[connection signal="timeout" from="GameTIme" to="." method="_on_GameTIme_timeout"]
